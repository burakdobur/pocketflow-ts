---
description: Guidelines for using PocketFlow, Utility Function, Text-to-Speech
globs: 
alwaysApply: false
---
# Text-to-Speech

| **Service**          | **Free Tier**         | **Pricing Model**                                            | **Docs**                                                            |
|----------------------|-----------------------|--------------------------------------------------------------|---------------------------------------------------------------------|
| **Amazon Polly**     | 5M std + 1M neural   | ~$4 /M (std), ~$16 /M (neural) after free tier               | [Polly Docs](https://aws.amazon.com/polly/)                         |
| **Google Cloud TTS** | 4M std + 1M WaveNet  | ~$4 /M (std), ~$16 /M (WaveNet) pay-as-you-go                | [Cloud TTS Docs](https://cloud.google.com/text-to-speech)           |
| **Azure TTS**        | 500K neural ongoing  | ~$15 /M (neural), discount at higher volumes                 | [Azure TTS Docs](https://azure.microsoft.com/products/cognitive-services/text-to-speech/) |
| **IBM Watson TTS**   | 10K chars Lite plan  | ~$0.02 /1K (i.e. ~$20 /M). Enterprise options available       | [IBM Watson Docs](https://www.ibm.com/cloud/watson-text-to-speech)   |
| **ElevenLabs**       | 10K chars monthly    | From ~$5/mo (30K chars) up to $330/mo (2M chars). Enterprise  | [ElevenLabs Docs](https://elevenlabs.io)                            |

## Example TypeScript Code

### Amazon Polly
```typescript
import { PollyClient, SynthesizeSpeechCommand } from "@aws-sdk/client-polly";
import { writeFileSync } from "fs";

const polly = new PollyClient({ region: "us-east-1" });

async function synthesizeSpeech(): Promise<void> {
  const command = new SynthesizeSpeechCommand({
    Text: "Hello from Polly!",
    OutputFormat: "mp3",
    VoiceId: "Joanna",
  });
  const response = await polly.send(command);
  writeFileSync("polly.mp3", response.AudioStream as Buffer);
}
```

### Google Cloud TTS
```typescript
import { TextToSpeechClient } from "@google-cloud/text-to-speech";
import { writeFileSync } from "fs";

const client = new TextToSpeechClient();

async function synthesizeSpeech(): Promise<void> {
  const [response] = await client.synthesizeSpeech({
    input: { text: "Hello from Google Cloud TTS!" },
    voice: { languageCode: "en-US" },
    audioConfig: { audioEncoding: "MP3" },
  });
  writeFileSync("gcloud_tts.mp3", response.audioContent as Buffer);
}
```

### Azure TTS
```typescript
import { SpeechConfig, AudioConfig, SpeechSynthesizer } from "microsoft-cognitiveservices-speech-sdk";

async function synthesizeSpeech(): Promise<void> {
  const speechConfig = SpeechConfig.fromSubscription("AZURE_KEY", "AZURE_REGION");
  const audioConfig = AudioConfig.fromAudioFileOutput("azure_tts.wav");
  const synthesizer = new SpeechSynthesizer(speechConfig, audioConfig);

  await new Promise((resolve, reject) => {
    synthesizer.speakTextAsync("Hello from Azure TTS!", resolve, reject);
  });
}
```

### IBM Watson TTS
```typescript
import TextToSpeechV1 from "ibm-watson/text-to-speech/v1";
import { IamAuthenticator } from "ibm-watson/auth";
import { writeFileSync } from "fs";

const textToSpeech = new TextToSpeechV1({
  authenticator: new IamAuthenticator({ apikey: "IBM_API_KEY" }),
  serviceUrl: "IBM_SERVICE_URL",
});

async function synthesizeSpeech(): Promise<void> {
  const response = await textToSpeech.synthesize({
    text: "Hello from IBM Watson!",
    voice: "en-US_AllisonV3Voice",
    accept: "audio/mp3",
  });
  writeFileSync("ibm_tts.mp3", response.result as Buffer);
}
```

### ElevenLabs
```typescript
import axios from "axios";
import { writeFileSync } from "fs";

async function synthesizeSpeech(): Promise<void> {
  const response = await axios.post(
    "https://api.elevenlabs.io/v1/text-to-speech/ELEVENLABS_VOICE",
    {
      text: "Hello from ElevenLabs!",
      voice_settings: { stability: 0.75, similarity_boost: 0.75 },
    },
    { headers: { "xi-api-key": "ELEVENLABS_KEY", "Content-Type": "application/json" } }
  );
  writeFileSync("elevenlabs.mp3", response.data);
}
```

