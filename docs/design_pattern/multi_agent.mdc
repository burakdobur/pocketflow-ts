---
description: Guidelines for using PocketFlow, Design Pattern, (Advanced) Multi-Agents
globs: 
alwaysApply: false
---
# (Advanced) Multi-Agents

Multiple [Agents](mdc:./flow.md) can work together by handling subtasks and communicating the progress. 
Communication between agents is typically implemented using message queues in shared storage.

> Most of the time, you don't need Multi-Agents. Start with a simple solution first.
{: .best-practice }

### Example Agent Communication: Message Queue

Here's a simple example showing how to implement agent communication using `AsyncQueue`. 
The agent listens for messages, processes them, and continues listening:

```typescript
class AgentNode extends AsyncNode {
  async prepAsync(_: SharedStore): Promise<string> {
    const messageQueue = this.params.messages;
    const message = await messageQueue.get();
    console.log(`Agent received: ${message}`);
    return message;
  }
}

// Create node and flow
const agent = new AgentNode();
agent.connectTo(agent); // connect to self
const flow = new AsyncFlow(agent);

// Create heartbeat sender
async function sendSystemMessages(messageQueue: AsyncQueue<string>): Promise<void> {
  let counter = 0;
  const messages = [
    "System status: all systems operational",
    "Memory usage: normal",
    "Network connectivity: stable",
    "Processing load: optimal",
  ];

  while (true) {
    const message = `${messages[counter % messages.length]} | timestamp_${counter}`;
    await messageQueue.put(message);
    counter++;
    await sleep(1000);
  }
}

async function main(): Promise<void> {
  const messageQueue = new AsyncQueue<string>();
  const shared: SharedStore = {};
  flow.setParams({ messages: messageQueue });

  // Run both coroutines
  await Promise.all([
    flow.runAsync(shared),
    sendSystemMessages(messageQueue),
  ]);
}

main();
```

The output:

```
Agent received: System status: all systems operational | timestamp_0
Agent received: Memory usage: normal | timestamp_1
Agent received: Network connectivity: stable | timestamp_2
Agent received: Processing load: optimal | timestamp_3
```

### Interactive Multi-Agent Example: Taboo Game

Here's a more complex example where two agents play the word-guessing game Taboo. 
One agent provides hints while avoiding forbidden words, and another agent tries to guess the target word:

```typescript
class AsyncHinter extends AsyncNode {
  async prepAsync(shared: SharedStore): Promise<[string, string[], string[]] | null> {
    const guess = await shared.hinterQueue.get();
    if (guess === "GAME_OVER") {
      return null;
    }
    return [shared.targetWord, shared.forbiddenWords, shared.pastGuesses || []];
  }

  async execAsync(inputs: [string, string[], string[]] | null): Promise<string | null> {
    if (!inputs) {
      return null;
    }
    const [target, forbidden, pastGuesses] = inputs;
    let prompt = `Generate hint for '${target}'\nForbidden words: ${forbidden}`;
    if (pastGuesses.length > 0) {
      prompt += `\nPrevious wrong guesses: ${pastGuesses}\nMake hint more specific.`;
    }
    prompt += "\nUse at most 5 words.";

    const hint = callLLM(prompt);
    console.log(`\nHinter: Here's your hint - ${hint}`);
    return hint;
  }

  async postAsync(shared: SharedStore, _: any, execRes: string | null): Promise<string> {
    if (!execRes) {
      return "end";
    }
    await shared.guesserQueue.put(execRes);
    return "continue";
  }
}

class AsyncGuesser extends AsyncNode {
  async prepAsync(shared: SharedStore): Promise<[string, string[]]> {
    const hint = await shared.guesserQueue.get();
    return [hint, shared.pastGuesses || []];
  }

  async execAsync(inputs: [string, string[]]): Promise<string> {
    const [hint, pastGuesses] = inputs;
    const prompt = `Given hint: ${hint}, past wrong guesses: ${pastGuesses}, make a new guess. Directly reply a single word:`;
    const guess = callLLM(prompt);
    console.log(`Guesser: I guess it's - ${guess}`);
    return guess;
  }

  async postAsync(shared: SharedStore, _: any, execRes: string): Promise<string> {
    if (execRes.toLowerCase() === shared.targetWord.toLowerCase()) {
      console.log("Game Over - Correct guess!");
      await shared.hinterQueue.put("GAME_OVER");
      return "end";
    }

    if (!shared.pastGuesses) {
      shared.pastGuesses = [];
    }
    shared.pastGuesses.push(execRes);

    await shared.hinterQueue.put(execRes);
    return "continue";
  }
}

async function main(): Promise<void> {
  // Set up game
  const shared: SharedStore = {
    targetWord: "nostalgia",
    forbiddenWords: ["memory", "past", "remember", "feeling", "longing"],
    hinterQueue: new AsyncQueue<string>(),
    guesserQueue: new AsyncQueue<string>(),
  };

  console.log("Game starting!");
  console.log(`Target word: ${shared.targetWord}`);
  console.log(`Forbidden words: ${shared.forbiddenWords}`);

  // Initialize by sending empty guess to hinter
  await shared.hinterQueue.put("");

  // Create nodes and flows
  const hinter = new AsyncHinter();
  const guesser = new AsyncGuesser();

  // Set up flows
  const hinterFlow = new AsyncFlow(hinter);
  const guesserFlow = new AsyncFlow(guesser);

  // Connect nodes to themselves
  hinter.connectTo(hinter);
  guesser.connectTo(guesser);

  // Run both agents concurrently
  await Promise.all([
    hinterFlow.runAsync(shared),
    guesserFlow.runAsync(shared),
  ]);
}

main();
```

The Output:

```
Game starting!
Target word: nostalgia
Forbidden words: ['memory', 'past', 'remember', 'feeling', 'longing']

Hinter: Here's your hint - Thinking of childhood summer days
Guesser: I guess it's - popsicle

Hinter: Here's your hint - When childhood cartoons make you emotional
Guesser: I guess it's - nostalgic

Hinter: Here's your hint - When old songs move you
Guesser: I guess it's - memories

Hinter: Here's your hint - That warm emotion about childhood
Guesser: I guess it's - nostalgia
Game Over - Correct guess!
```