---
description: Guidelines for using PocketFlow, Design Pattern, Map Reduce
globs: 
alwaysApply: false
---
# Map Reduce

MapReduce is a design pattern suitable when you have either:
- Large input data (e.g., multiple files to process), or
- Large output data (e.g., multiple forms to fill)

and there is a logical way to break the task into smaller, ideally independent parts. 

You first break down the task using [BatchNode](../core_abstraction/batch.md) in the map phase, followed by aggregation in the reduce phase.

### Example: Document Summarization

```typescript
class SummarizeAllFiles extends BatchNode {
  prep(shared: SharedStore): [string, string][] {
    const filesDict = shared.files; // e.g., 10 files
    return Object.entries(filesDict); // [["file1.txt", "aaa..."], ["file2.txt", "bbb..."], ...]
  }

  exec([filename, fileContent]: [string, string]): [string, string] {
    const summaryText = callLLM(`Summarize the following file:\n${fileContent}`);
    return [filename, summaryText];
  }

  post(shared: SharedStore, _: any, execResList: [string, string][]): void {
    shared.fileSummaries = Object.fromEntries(execResList);
  }
}

class CombineSummaries extends Node {
  prep(shared: SharedStore): Record<string, string> {
    return shared.fileSummaries;
  }

  exec(fileSummaries: Record<string, string>): string {
    const textList = Object.entries(fileSummaries).map(
      ([fname, summ]) => `${fname} summary:\n${summ}\n`
    );
    const bigText = textList.join("\n---\n");

    return callLLM(`Combine these file summaries into one final summary:\n${bigText}`);
  }

  post(shared: SharedStore, _: any, finalSummary: string): void {
    shared.allFilesSummary = finalSummary;
  }
}

const batchNode = new SummarizeAllFiles();
const combineNode = new CombineSummaries();

batchNode.connectTo(combineNode);

const flow = new Flow(batchNode);

const shared: SharedStore = {
  files: {
    "file1.txt": "Alice was beginning to get very tired of sitting by her sister...",
    "file2.txt": "Some other interesting text ...",
    // ...
  },
};

flow.run(shared);
console.log("Individual Summaries:", shared.fileSummaries);
console.log("\nFinal Summary:\n", shared.allFilesSummary);
```

> **Performance Tip**: The example above works sequentially. You can speed up the map phase by running it in parallel. See [(Advanced) Parallel](../core_abstraction/parallel.md) for more details.
{: .note }