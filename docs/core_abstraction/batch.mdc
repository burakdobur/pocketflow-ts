---
description: Guidelines for using PocketFlow, Core Abstraction, Batch
globs: 
alwaysApply: false
---
# Batch

**Batch** makes it easier to handle large inputs in one Node or **rerun** a Flow multiple times. Example use cases:
- **Chunk-based** processing (e.g., splitting large texts).
- **Iterative** processing over lists of input items (e.g., user queries, files, URLs).

## 1. BatchNode

A **BatchNode** extends `Node` but changes `prep()` and `exec()`:

- **`prep(shared)`**: returns an **iterable** (e.g., list, generator).
- **`exec(item)`**: called **once** per item in that iterable.
- **`post(shared, prep_res, exec_res_list)`**: after all items are processed, receives a **list** of results (`exec_res_list`) and returns an **Action**.


### Example: Summarize a Large File

```typescript
class MapSummaries extends BatchNode {
  prep(shared: SharedStore): string[] {
    // Suppose we have a big file; chunk it
    const content = shared.data;
    const chunkSize = 10000;
    const chunks: string[] = [];
    for (let i = 0; i < content.length; i += chunkSize) {
      chunks.push(content.slice(i, i + chunkSize));
    }
    return chunks;
  }

  exec(chunk: string): string {
    const prompt = `Summarize this chunk in 10 words: ${chunk}`;
    return callLLM(prompt);
  }

  post(shared: SharedStore, _: any, execResList: string[]): string {
    const combined = execResList.join("\n");
    shared.summary = combined;
    return "default";
  }
}

const mapSummaries = new MapSummaries();
const flow = new Flow(mapSummaries);
flow.run(shared);
```

---

## 2. BatchFlow

A **BatchFlow** runs a **Flow** multiple times, each time with different `params`. Think of it as a loop that replays the Flow for each parameter set.

### Key Differences from BatchNode

**Important**: Unlike BatchNode, which processes items and modifies the shared store:

1. BatchFlow returns **parameters to pass to the child Flow**, not data to process
2. These parameters are accessed in child nodes via `this.params`, not from the shared store
3. Each child Flow runs independently with a different set of parameters
4. Child nodes can be regular Nodes, not BatchNodes (the batching happens at the Flow level)

### Example: Summarize Many Files

```typescript
class SummarizeAllFiles extends BatchFlow {
  prep(shared: SharedStore): Record<string, string>[] {
    // IMPORTANT: Return a list of param dictionaries (not data for processing)
    const filenames = Object.keys(shared.data); // e.g., ["file1.txt", "file2.txt", ...]
    return filenames.map((fn) => ({ filename: fn }));
  }
}

// Child node that accesses filename from params, not shared store
class LoadFile extends Node {
  prep(shared: SharedStore): string {
    // Access filename from params (not from shared)
    const filename = this.params.filename; // Important! Use this.params, not shared
    return filename;
  }

  exec(filename: string): string {
    return readFile(filename); // Read file content
  }

  post(shared: SharedStore, _: any, execRes: string): string {
    // Store file content in shared
    shared.currentFileContent = execRes;
    return "default";
  }
}

// Summarize node that works on the currently loaded file
class Summarize extends Node {
  prep(shared: SharedStore): string {
    return shared.currentFileContent;
  }

  exec(content: string): string {
    const prompt = `Summarize this file in 50 words: ${content}`;
    return callLLM(prompt);
  }

  post(shared: SharedStore, _: any, execRes: string): string {
    // Store summary in shared, indexed by current filename
    const filename = this.params.filename; // Again, using params
    if (!shared.summaries) {
      shared.summaries = {};
    }
    shared.summaries[filename] = execRes;
    return "default";
  }
}

// Create a per-file flow
const loadFile = new LoadFile();
const summarize = new Summarize();
loadFile.connectTo(summarize);
const summarizeFile = new Flow(loadFile);

// Wrap in a BatchFlow to process all files
const summarizeAllFiles = new SummarizeAllFiles(summarizeFile);
summarizeAllFiles.run(shared);
```

### Under the Hood
1. `prep(shared)` in the BatchFlow returns a list of param dicts—e.g., `[{"filename": "file1.txt"}, {"filename": "file2.txt"}, ...]`.
2. The **BatchFlow** loops through each dict. For each one:
   - It merges the dict with the BatchFlow's own `params` (if any): `{**batch_flow.params, **dict_from_prep}`
   - It calls `flow.run(shared)` using the merged parameters
   - **IMPORTANT**: These parameters are passed to the child Flow's nodes via `self.params`, NOT via the shared store
3. This means the sub-Flow is run **repeatedly**, once for every param dict, with each node in the flow accessing the parameters via `self.params`.

---

## 3. Nested or Multi-Level Batches

You can nest a **BatchFlow** in another **BatchFlow**. For instance:
- **Outer** batch: returns a list of directory param dicts (e.g., `{"directory": "/pathA"}`, `{"directory": "/pathB"}`, ...).
- **Inner** batch: returning a list of per-file param dicts.

At each level, **BatchFlow** merges its own param dict with the parent’s. By the time you reach the **innermost** node, the final `params` is the merged result of **all** parents in the chain. This way, a nested structure can keep track of the entire context (e.g., directory + file name) at once.

```typescript
class FileBatchFlow extends BatchFlow {
  prep(shared: SharedStore): Record<string, string>[] {
    // Access directory from params (set by parent)
    const directory = this.params.directory;
    const files = listFiles(directory, ".txt"); // e.g., ["file1.txt", "file2.txt", ...]
    return files.map((f) => ({ filename: f }));
  }
}

class DirectoryBatchFlow extends BatchFlow {
  prep(shared: SharedStore): Record<string, string>[] {
    const directories = ["/path/to/dirA", "/path/to/dirB"];
    return directories.map((d) => ({ directory: d }));
  }
}

// The actual processing node
class ProcessFile extends Node {
  prep(shared: SharedStore): string {
    // Access both directory and filename from params
    const directory = this.params.directory; // From outer batch
    const filename = this.params.filename; // From inner batch
    return `${directory}/${filename}`;
  }

  exec(fullPath: string): string {
    // Process the file...
    return `Processed ${fullPath}`;
  }

  post(shared: SharedStore, prepRes: string, execRes: string): string {
    // Store results, perhaps indexed by path
    if (!shared.results) {
      shared.results = {};
    }
    shared.results[prepRes] = execRes;
    return "default";
  }
}

// Set up the nested batch structure
const processNode = new ProcessFile();
const innerFlow = new FileBatchFlow(processNode);
const outerFlow = new DirectoryBatchFlow(innerFlow);

// Run it
outerFlow.run(shared);
```
