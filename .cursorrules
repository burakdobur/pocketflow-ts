---
layout: default
title: "Agentic Coding"
---

## Agentic Coding: Humans Design, Agents code

> If you are an AI agent involved in building LLM Systems, read this guide **VERY, VERY** carefully! This is the most important chapter in the entire document. Throughout development, you should always (1) start with a small and simple solution, (2) design at a high level (`docs/design.md`) before implementation, and (3) frequently ask humans for feedback and clarification.
{: .warning }

## Agentic Coding Steps

Agentic Coding should be a collaboration between Human System Design and Agent Implementation:

| Steps                  | Human      | AI        | Comment                                                                 |
|:-----------------------|:----------:|:---------:|:------------------------------------------------------------------------|
| 1. Requirements | â˜…â˜…â˜… High  | â˜…â˜†â˜† Low   | Humans understand the requirements and context.                    |
| 2. Flow          | â˜…â˜…â˜† Medium | â˜…â˜…â˜† Medium |  Humans specify the high-level design, and the AI fills in the details. |
| 3. Utilities   | â˜…â˜…â˜† Medium | â˜…â˜…â˜† Medium | Humans provide available external APIs and integrations, and the AI helps with implementation. |
| 4. Data          | â˜…â˜†â˜† Low    | â˜…â˜…â˜… High   | AI designs the data schema, and humans verify.                            |
| 5. Node          | â˜…â˜†â˜† Low   | â˜…â˜…â˜… High  | The AI helps design the node based on the flow.          |
| 6. Implementation      | â˜…â˜†â˜† Low   | â˜…â˜…â˜… High  |  The AI implements the flow based on the design. |
| 7. Optimization        | â˜…â˜…â˜† Medium | â˜…â˜…â˜† Medium | Humans evaluate the results, and the AI helps optimize. |
| 8. Reliability         | â˜…â˜†â˜† Low   | â˜…â˜…â˜… High  |  The AI writes test cases and addresses corner cases.     |

1. **Requirements**: Clarify the requirements for your project, and evaluate whether an AI system is a good fit.
    - Understand AI systems' strengths and limitations:
      - **Good for**: Routine tasks requiring common sense (filling forms, replying to emails)
      - **Good for**: Creative tasks with well-defined inputs (building slides, writing SQL)
      - **Not good for**: Ambiguous problems requiring complex decision-making (business strategy, startup planning)
    - **Keep It User-Centric:** Explain the "problem" from the user's perspective rather than just listing features.
    - **Balance complexity vs. impact**: Aim to deliver the highest value features with minimal complexity early.

2. **Flow Design**: Outline at a high level, describe how your AI system orchestrates nodes.
    - Identify applicable design patterns (e.g., [Map Reduce](./design_pattern/mapreduce.md), [Agent](./design_pattern/agent.md), [RAG](./design_pattern/rag.md)).
      - For each node in the flow, start with a high-level one-line description of what it does.
      - If using **Map Reduce**, specify how to map (what to split) and how to reduce (how to combine).
      - If using **Agent**, specify what are the inputs (context) and what are the possible actions.
      - If using **RAG**, specify what to embed, noting that there's usually both offline (indexing) and online (retrieval) workflows.
    - Outline the flow and draw it in a mermaid diagram. For example:

      ```mermaid
      flowchart LR
          start[Start] --> batch[Batch]
          batch --> check[Check]
          check -->|OK| process
          check -->|Error| fix[Fix]
          fix --> check
          
          subgraph process[Process]
            step1[Step 1] --> step2[Step 2]
          end
          
          process --> endNode[End]
      ```

    - > **If Humans can't specify the flow, AI Agents can't automate it!** Before building an LLM system, thoroughly understand the problem and potential solution by manually solving example inputs to develop intuition.  
      {: .best-practice }

3. **Utilities**: Based on the Flow Design, identify and implement necessary utility functions.
    - Think of your AI system as the brain. It needs a bodyâ€”these *external utility functions*â€”to interact with the real world:

        ``` html
                <div align="center"><img src="https://github.com/the-pocket/.github/raw/main/assets/utility.png?raw=true" width="400"/></div>
        ```

        - Reading inputs (e.g., retrieving Slack messages, reading emails)
        - Writing outputs (e.g., generating reports, sending emails)
        - Using external tools (e.g., calling LLMs, searching the web)
        - **NOTE**: *LLM-based tasks* (e.g., summarizing text, analyzing sentiment) are **NOT** utility functions; rather, they are *core functions* internal in the AI system.
    - For each utility function, implement it and write a simple test.
    - Document their input/output, as well as why they are necessary. For example:
      - `name`: `getEmbedding` (`utils/getEmbedding.ts`)
      - `input`: `string`
      - `output`: a vector of 3072 floats
      - `necessity`: Used by the second node to embed text
    - Example utility implementation:

      ```typescript
      // utils/callLLM.ts
      import OpenAI from 'openai';

      const client = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

      export async function callLLM(prompt: string): Promise<string> {
          const response = await client.chat.completions.create({
              model: "gpt-4",
              messages: [{ role: "user", content: prompt }]
          });
          return response.choices[0]?.message?.content || "";
      }
      ```

    - > **Sometimes, design Utilities before Flow:**  For example, for an LLM project to automate a legacy system, the bottleneck will likely be the available interface to that system. Start by designing the hardest utilities for interfacing, and then build the flow around them.
      {: .best-practice }
    - > **Avoid Exception Handling in Utilities**: If a utility function is called from a Node's `exec()` method, avoid using `try...catch` blocks within the utility. Let the Node's built-in retry mechanism handle failures.
      {: .warning }

4. **Data Design**: Design the shared store that nodes will use to communicate.
   - One core design principle for PocketFlow is to use a well-designed [shared store](./core_abstraction/communication.md)â€”a data contract that all nodes agree upon to retrieve and store data.
      - For simple systems, use an in-memory object.
      - For more complex systems or when persistence is required, use a database.
      - **Don't Repeat Yourself**: Use in-memory references or foreign keys.
      - Example shared store design:

        ```typescript
        const shared = {
            user: {
                id: "user123",
                context: {                // Another nested object
                    weather: { temp: 72, condition: "sunny" },
                    location: "San Francisco"
                }
            },
            results: {}                   // Empty object to store outputs
        };
        ```

5. **Node Design**: Plan how each node will read and write data, and use utility functions.
   - For each [Node](./core_abstraction/node.md), describe its type, how it reads and writes data, and which utility function it uses. Keep it specific but high-level without codes. For example:
     - `type`: Regular (or Batch, or Async)
     - `prep`: Read "text" from the shared store
     - `exec`: Call the embedding utility function. **Avoid exception handling here**; let the Node's retry mechanism manage failures.
     - `post`: Write "embedding" to the shared store

6. **Implementation**: Implement the initial nodes and flows based on the design.
   - ðŸŽ‰ If you've reached this step, humans have finished the design. Now *Agentic Coding* begins!
   - **"Keep it simple, stupid!"** Avoid complex features and full-scale type checking.
   - **FAIL FAST**! Leverage the built-in [Node](./core_abstraction/node.md) retry and fallback mechanisms to handle failures gracefully. This helps you quickly identify weak points in the system.
   - Add logging throughout the code to facilitate debugging.

7. **Optimization**:
   - **Use Intuition**: For a quick initial evaluation, human intuition is often a good start.
   - **Redesign Flow (Back to Step 3)**: Consider breaking down tasks further, introducing agentic decisions, or better managing input contexts.
   - If your flow design is already solid, move on to micro-optimizations:
     - **Prompt Engineering**: Use clear, specific instructions with examples to reduce ambiguity.
     - **In-Context Learning**: Provide robust examples for tasks that are difficult to specify with instructions alone.

   - > **You'll likely iterate a lot!** Expect to repeat Steps 3â€“6 hundreds of times.
     >
     >
     ``` html
        <div align="center"><img src="https://github.com/the-pocket/.github/raw/main/assets/success.png?raw=true" width="400"/></div>
     ```

     {: .best-practice }

8. **Reliability**  
   - **Node Retries**: Add checks in the node `exec` to ensure outputs meet requirements, and consider increasing `maxRetries` and `wait` times.
   - **Logging and Visualization**: Maintain logs of all attempts and visualize node results for easier debugging.
   - **Self-Evaluation**: Add a separate node (powered by an LLM) to review outputs when results are uncertain.

## Example LLM Project File Structure

``` text
my_project/
â”œâ”€â”€ main.ts
â”œâ”€â”€ nodes.ts
â”œâ”€â”€ flow.ts
â”œâ”€â”€ utils/
â”‚   â”œâ”€â”€ callLLM.ts
â”‚   â””â”€â”€ searchWeb.ts
â”œâ”€â”€ package.json
â””â”€â”€ docs/
    â””â”€â”€ design.md
```

- **`docs/design.md`**: Contains project documentation for each step above. This should be *high-level* and *no-code*.
- **`utils/`**: Contains all utility functions.
  - It's recommended to dedicate one TypeScript file to each API call, for example `callLLM.ts` or `searchWeb.ts`.
  - Each file should also include a `main()` function to try that API call
- **`nodes.ts`**: Contains all the node definitions.

  ```typescript
  // nodes.ts
  import { Node } from 'pocketflow-ts';
  import { callLLM } from './utils/callLLM';

  export class GetQuestionNode extends Node {
      exec(): string {
          // Get question directly from user input
          return "What is the meaning of life?";
      }
      
      post(shared: any, prepRes: any, execRes: string): string {
          // Store the user's question
          shared.question = execRes;
          return "default";  // Go to the next node
      }
  }

  export class AnswerNode extends Node {
      prep(shared: any): string {
          // Read question from shared
          return shared.question;
      }
      
      exec(question: string): string {
          // Call LLM to get the answer
          return callLLM(question);
      }
      
      post(shared: any, prepRes: string, execRes: string): void {
          // Store the answer in shared
          shared.answer = execRes;
      }
  }
  ```

- **`flow.ts`**: Implements functions that create flows by importing node definitions and connecting them.

  ```typescript
  // flow.ts
  import { Flow } from 'pocketflow-ts';
  import { GetQuestionNode, AnswerNode } from './nodes';

  export function createQAFlow(): Flow {
      // Create nodes
      const getQuestionNode = new GetQuestionNode();
      const answerNode = new AnswerNode();
      
      // Connect nodes in sequence
      getQuestionNode.connectTo(answerNode);
      
      // Create flow starting with input node
      return new Flow(getQuestionNode);
  }
  ```

- **`main.ts`**: Serves as the project's entry point.

  ```typescript
  // main.ts
  import { createQAFlow } from './flow';

  async function main() {
      const shared = {
          question: null,  // Will be populated by GetQuestionNode
          answer: null     // Will be populated by AnswerNode
      };

      // Create the flow and run it
      const qaFlow = createQAFlow();
      await qaFlow.run(shared);
      console.log(`Question: ${shared.question}`);
      console.log(`Answer: ${shared.answer}`);
  }

  main();
  ```
